import socket
import threading

# Server setup
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind(('0.0.0.0', 5555))
server.listen()

# List to hold client connections
clients = []

# Function to handle each client's connection
def handle_client(client_socket):
    while True:
        try:
            # Receive data from client
            data = client_socket.recv(1024).decode('utf-8')
            # Broadcast the received data to all clients
            for c in clients:
                c.send(bytes(data, 'utf-8'))
        except:
            # Remove the broken connection
            clients.remove(client_socket)
            client_socket.close()
            break

# Function to start the server to accept incoming connections
def start_server():
    while True:
        client_socket, addr = server.accept()
        clients.append(client_socket)
        client_thread = threading.Thread(target=handle_client, args=(client_socket,))
        client_thread.start()

# Start the server in a separate thread
server_thread = threading.Thread(target=start_server)
server_thread.start()

# Client setup
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('127.0.0.1', 5555))

# Function to handle receiving data from the server
def receive_data():
    while True:
        try:
            # Receive data from the server
            data = client.recv(1024).decode('utf-8')
            print(data)
        except:
            # If an error occurs, close the client socket
            client.close()
            break

# Start the client to receive data in a separate thread
receive_thread = threading.Thread(target=receive_data)
receive_thread.start()

# Simulate sending data (for instance, shooting action)
while True:
    message = input('Enter a message: ')
    client.send(bytes(message, 'utf-8'))
